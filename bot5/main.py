import asyncio
import logging
import sys

from aiogram import F
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery

import env
from apps import keyboardsOst as kbOst, keyboards as kb
import apps.wb as wb
import apps.wb_analiz as wb_analiz
import apps.ghost as ghost
import apps.citation as citation
import baza.BD_methods as db



TOKEN = env.TELEGRAM_TOKEN

# All handlers should be attached to the Router (or Dispatcher)
dp = Dispatcher()

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    await message.answer(f"Hello, {html.bold(message.from_user.full_name)}!", reply_markup=kb.startMenu)

@dp.message(lambda message: message.web_app_data and message.web_app_data.data)
async def echo_miniApp(message: Message) -> None:
    db.visit(message.from_user.first_name, message.from_user.id) # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è

    # print('########## message = ', message)  # –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
    print(' message.from_user.id',  message.from_user.id)
    # print('== == == message.web_app_data', message.web_app_data)
    # –ø—Ä–∏—à–ª–æ —Å –≤–µ–± –∞–ø–ø

    stores = {}
    arrStores =  message.web_app_data.data.split('üê∑')
    ind = 0
    for el in arrStores:
        ind += 1
        arrEl = el.split('üåû')
        if arrEl[0]:
            stores[ind] = {'name': arrEl[0], 'art': arrEl[1], 'token': arrEl[2]}

    print('–ü–æ–ª—É—á–∏–ª–∏ –∏–∑ –ú–ò–ù–ò–ê–ü–ü=',message.web_app_data)
    print ('stores', stores)
    db.saveDatasFromMiniApp(message.from_user.id, message.web_app_data.data)



@dp.message()
async def echo_handler(message: Message) -> None:
    db.visit(message.from_user.first_name, message.from_user.id) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è


    print('<><><><><><> message.text = ', message.text)
  

    # print('message.user.id = ', message.user)
    if message.text == '‚ò∏ Wildberies': return await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=kb.subMenu)
    if message.text == '‚Ü© –ù–∞–∑–∞–¥': return await message.answer('–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n'+kb.links, reply_markup=kb.startMenu)
    if message.text == '‚úÖ –¶–∏—Ç–∞—Ç–∞': 
        answer = citation.nextCitation()
        return await message.answer(answer, reply_markup=kb.getTranslateLink(answer)) 
    if message.text == '‚òù –°—Å—ã–ª–∫–∏': return await message.answer(kb.links, parse_mode='HTML')
    if message.text == 'üê∏ –ü—Ä–∏–µ–º–∫–∞':
        key = env.WB_KEY # –ü–æ–∫–∞ –∫–ª—é—á –±–µ—Ä–µ–º –∑–∞—à–∏—Ç—ã–π –≤ –∫–æ–¥
        return await message.answer('<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 14 –¥–Ω–µ–π</b>:\n\n' + wb.getWB(key), parse_mode='HTML')
    
    if message.text == '/love': return await message.answer(kb.iloveYou)
    if message.text == '/ost' or  message.text == 'üõí –û—Å—Ç–∞—Ç–∫–∏':
        store_ids = db.wb_get_store(message.from_user.id) 
        print('st o r e _ i d s = ', store_ids)
        if not store_ids: return await message.answer('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"')
        else: return await message.answer(text='–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É. –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –æ—Å—Ç463',reply_markup=kbOst.createOstButtons(len(store_ids)))

    # if message.text[-3:] == '###':
    #     return await message.answer('–ê—Ä—Ç–∏–∫—É–ª —É–¥–∞–ª–µ–Ω', reply_markup=kbOst.delBt(message.text))
    # elif message.text.find(',')>-1 and message.text[-1] == '#':
    #     return await message.answer('–ê—Ä—Ç–∏–∫—É–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã',reply_markup=kbOst.addBts(message.text))


    # if len(message.text)>100 and message.text.find('QifQ.'):
    #     db.wb_add_store(message.from_user.id, message.te xt)
    #     return await message.answer('–¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

    if message.text== None :
        print('========None=======')
        return False

    # –ï—Å–ª–∏ –Ω–µ –æ—Ç–ª–æ–≤–∏–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é –±—É–∫–≤
    try:
        WB = message.text.upper().find('WB')
        help = message.text.upper().find('HELP')
        ost = message.text.upper().find('OST') 
        if ost < 0: ost = message.text.upper().find('–û–°–¢')
        game = message.text.upper().find('GAME')
        cit = message.text.upper().find('CIT')
        if ghost.isStarted():
            if not is_number(message.text): return ghost.end()                    
            else: return await message.answer(ghost.ask(int(message.text)))
        if game>-1: return await message.answer(ghost.start())
        if WB>-1:
            ans = wb.getWB()        
            await message.answer(ans)
        elif cit>-1:
            answer = citation.nextCitation()
            await message.answer(answer, reply_markup=kb.getTranslateLink(answer))
        elif help>-1:
            await message.answer(f"wb - —Å–∫–ª–∞–¥—ã\n ost- –û—Å—Ç–∞—Ç–∫–∏\n ost463- –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
        elif ost>-1:
            articulText = message.text[3:]
            if articulText == '0':
                 wb_analiz.getAnaliz('0')
                 await message.answer('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏') 
            elif not articulText:
                await message.answer(
                        text='–í—ã–±–µ—Ä–∏ –∏–ª–∏ –ø–∏—à–∏ ost463',
                        reply_markup=kb.keyboard
                )
            else:
                ans = wb_analiz.getAnaliz(articulText)
                await message.answer(ans)                    
        else: await message.send_copy(chat_id=message.chat.id)
    except TypeError:
        await message.answer("Nice try!")





#, .in_(['262','382','463','542','567', '755'])
@dp.callback_query(F.data)
async def process_buttons_press(callback: CallbackQuery):    
    print ('>>>>>>>callback.data', callback.data)
    if callback.data == 'addOst':
        return callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–ª–µ –∞—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –í –∫–æ–Ω—Ü–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–Ω–∞–∫–æ–º #')
    if callback.data == 'delOst':
        return callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –í –∫–æ–Ω—Ü–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç—Ä–æ–π–Ω—ã–º ###')
    ans = wb_analiz.getAnaliz(callback.data)
    await callback.message.edit_text(ans)
    await callback.answer()


async def main() -> None:
    # Initialize Bot instance with default bot properties which will be passed to all API calls
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())